/**
 * Generated by the Emboss compiler.  DO NOT EDIT!
 */
#ifndef TESTDATA_INT_SIZES_EMB_H_
#define TESTDATA_INT_SIZES_EMB_H_
#include <stdint.h>
#include <string.h>

#include <algorithm>
#include <type_traits>
#include <utility>

#include "runtime/cpp/emboss_cpp_util.h"

#include "runtime/cpp/emboss_prelude.h"

#include "runtime/cpp/emboss_enum_view.h"

#include "runtime/cpp/emboss_text_util.h"



/* NOLINTBEGIN */
namespace emboss {
namespace test {
namespace Sizes {

}  // namespace Sizes


template <class Storage>
class GenericSizesView;












namespace Sizes {

}  // namespace Sizes


template <class View>
struct EmbossReservedInternalIsGenericSizesView;

template <class Storage>
class GenericSizesView final {
 public:
  GenericSizesView() : backing_() {}
  explicit GenericSizesView(
       Storage emboss_reserved_local_bytes)
      : backing_(emboss_reserved_local_bytes) 
         {}

  template <typename OtherStorage>
  GenericSizesView(
      const GenericSizesView<OtherStorage> &emboss_reserved_local_other)
      : backing_{emboss_reserved_local_other.BackingStorage()}
         {}

  template <typename Arg,
            typename = typename ::std::enable_if<
                !EmbossReservedInternalIsGenericSizesView<
                    typename ::std::remove_cv<typename ::std::remove_reference<
                        Arg>::type>::type>::value>::type>
  explicit GenericSizesView(
       Arg &&emboss_reserved_local_arg)
      : backing_(::std::forward<Arg>(
            emboss_reserved_local_arg)) 
         {}
  template <typename Arg0, typename Arg1, typename... Args>
  explicit GenericSizesView(
       Arg0 &&emboss_reserved_local_arg0,
      Arg1 &&emboss_reserved_local_arg1, Args &&... emboss_reserved_local_args)
      : backing_(::std::forward<Arg0>(emboss_reserved_local_arg0),
                 ::std::forward<Arg1>(emboss_reserved_local_arg1),
                 ::std::forward<Args>(
                     emboss_reserved_local_args)...) 
         {}

  template <typename OtherStorage>
  GenericSizesView<Storage> &operator=(
      const GenericSizesView<OtherStorage> &emboss_reserved_local_other) {
    backing_ = emboss_reserved_local_other.BackingStorage();
    return *this;
  }

  

  bool Ok() const {
    if (!IsComplete()) return false;

    if (!has_one_byte().Known()) return false;
    if (has_one_byte().ValueOrDefault() && !one_byte().Ok()) return false;


    if (!has_two_byte().Known()) return false;
    if (has_two_byte().ValueOrDefault() && !two_byte().Ok()) return false;


    if (!has_three_byte().Known()) return false;
    if (has_three_byte().ValueOrDefault() && !three_byte().Ok()) return false;


    if (!has_four_byte().Known()) return false;
    if (has_four_byte().ValueOrDefault() && !four_byte().Ok()) return false;


    if (!has_five_byte().Known()) return false;
    if (has_five_byte().ValueOrDefault() && !five_byte().Ok()) return false;


    if (!has_six_byte().Known()) return false;
    if (has_six_byte().ValueOrDefault() && !six_byte().Ok()) return false;


    if (!has_seven_byte().Known()) return false;
    if (has_seven_byte().ValueOrDefault() && !seven_byte().Ok()) return false;


    if (!has_eight_byte().Known()) return false;
    if (has_eight_byte().ValueOrDefault() && !eight_byte().Ok()) return false;


    if (!has_IntrinsicSizeInBytes().Known()) return false;
    if (has_IntrinsicSizeInBytes().ValueOrDefault() && !IntrinsicSizeInBytes().Ok()) return false;


    if (!has_MaxSizeInBytes().Known()) return false;
    if (has_MaxSizeInBytes().ValueOrDefault() && !MaxSizeInBytes().Ok()) return false;


    if (!has_MinSizeInBytes().Known()) return false;
    if (has_MinSizeInBytes().ValueOrDefault() && !MinSizeInBytes().Ok()) return false;



    return true;
  }
  Storage BackingStorage() const { return backing_; }
  bool IsComplete() const {
    return backing_.Ok() && IntrinsicSizeInBytes().Ok() &&
           backing_.SizeInBytes() >=
               static_cast</**/ ::std::size_t>(
                   IntrinsicSizeInBytes().UncheckedRead());
  }
  static constexpr ::std::size_t SizeInBytes() {
    return static_cast</**/ ::std::size_t>(IntrinsicSizeInBytes().Read());
  }
  static constexpr bool SizeIsKnown() {
    return IntrinsicSizeInBytes().Ok();
  }


  template <typename OtherStorage>
  bool Equals(
      GenericSizesView<OtherStorage> emboss_reserved_local_other) const {
    
    if (!has_one_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_one_byte().Known()) return false;

    if (emboss_reserved_local_other.has_one_byte().ValueOrDefault() &&
        !has_one_byte().ValueOrDefault())
      return false;
    if (has_one_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_one_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_one_byte().ValueOrDefault() &&
        has_one_byte().ValueOrDefault() &&
        !one_byte().Equals(emboss_reserved_local_other.one_byte()))
      return false;



    if (!has_two_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_two_byte().Known()) return false;

    if (emboss_reserved_local_other.has_two_byte().ValueOrDefault() &&
        !has_two_byte().ValueOrDefault())
      return false;
    if (has_two_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_two_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_two_byte().ValueOrDefault() &&
        has_two_byte().ValueOrDefault() &&
        !two_byte().Equals(emboss_reserved_local_other.two_byte()))
      return false;



    if (!has_three_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_three_byte().Known()) return false;

    if (emboss_reserved_local_other.has_three_byte().ValueOrDefault() &&
        !has_three_byte().ValueOrDefault())
      return false;
    if (has_three_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_three_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_three_byte().ValueOrDefault() &&
        has_three_byte().ValueOrDefault() &&
        !three_byte().Equals(emboss_reserved_local_other.three_byte()))
      return false;



    if (!has_four_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_four_byte().Known()) return false;

    if (emboss_reserved_local_other.has_four_byte().ValueOrDefault() &&
        !has_four_byte().ValueOrDefault())
      return false;
    if (has_four_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_four_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_four_byte().ValueOrDefault() &&
        has_four_byte().ValueOrDefault() &&
        !four_byte().Equals(emboss_reserved_local_other.four_byte()))
      return false;



    if (!has_five_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_five_byte().Known()) return false;

    if (emboss_reserved_local_other.has_five_byte().ValueOrDefault() &&
        !has_five_byte().ValueOrDefault())
      return false;
    if (has_five_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_five_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_five_byte().ValueOrDefault() &&
        has_five_byte().ValueOrDefault() &&
        !five_byte().Equals(emboss_reserved_local_other.five_byte()))
      return false;



    if (!has_six_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_six_byte().Known()) return false;

    if (emboss_reserved_local_other.has_six_byte().ValueOrDefault() &&
        !has_six_byte().ValueOrDefault())
      return false;
    if (has_six_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_six_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_six_byte().ValueOrDefault() &&
        has_six_byte().ValueOrDefault() &&
        !six_byte().Equals(emboss_reserved_local_other.six_byte()))
      return false;



    if (!has_seven_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_seven_byte().Known()) return false;

    if (emboss_reserved_local_other.has_seven_byte().ValueOrDefault() &&
        !has_seven_byte().ValueOrDefault())
      return false;
    if (has_seven_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_seven_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_seven_byte().ValueOrDefault() &&
        has_seven_byte().ValueOrDefault() &&
        !seven_byte().Equals(emboss_reserved_local_other.seven_byte()))
      return false;



    if (!has_eight_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_eight_byte().Known()) return false;

    if (emboss_reserved_local_other.has_eight_byte().ValueOrDefault() &&
        !has_eight_byte().ValueOrDefault())
      return false;
    if (has_eight_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_eight_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_eight_byte().ValueOrDefault() &&
        has_eight_byte().ValueOrDefault() &&
        !eight_byte().Equals(emboss_reserved_local_other.eight_byte()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  bool UncheckedEquals(
      GenericSizesView<OtherStorage> emboss_reserved_local_other) const {
    
    if (emboss_reserved_local_other.has_one_byte().ValueOr(false) &&
        !has_one_byte().ValueOr(false))
      return false;
    if (has_one_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_one_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_one_byte().ValueOr(false) &&
        has_one_byte().ValueOr(false) &&
        !one_byte().UncheckedEquals(emboss_reserved_local_other.one_byte()))
      return false;



    if (emboss_reserved_local_other.has_two_byte().ValueOr(false) &&
        !has_two_byte().ValueOr(false))
      return false;
    if (has_two_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_two_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_two_byte().ValueOr(false) &&
        has_two_byte().ValueOr(false) &&
        !two_byte().UncheckedEquals(emboss_reserved_local_other.two_byte()))
      return false;



    if (emboss_reserved_local_other.has_three_byte().ValueOr(false) &&
        !has_three_byte().ValueOr(false))
      return false;
    if (has_three_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_three_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_three_byte().ValueOr(false) &&
        has_three_byte().ValueOr(false) &&
        !three_byte().UncheckedEquals(emboss_reserved_local_other.three_byte()))
      return false;



    if (emboss_reserved_local_other.has_four_byte().ValueOr(false) &&
        !has_four_byte().ValueOr(false))
      return false;
    if (has_four_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_four_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_four_byte().ValueOr(false) &&
        has_four_byte().ValueOr(false) &&
        !four_byte().UncheckedEquals(emboss_reserved_local_other.four_byte()))
      return false;



    if (emboss_reserved_local_other.has_five_byte().ValueOr(false) &&
        !has_five_byte().ValueOr(false))
      return false;
    if (has_five_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_five_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_five_byte().ValueOr(false) &&
        has_five_byte().ValueOr(false) &&
        !five_byte().UncheckedEquals(emboss_reserved_local_other.five_byte()))
      return false;



    if (emboss_reserved_local_other.has_six_byte().ValueOr(false) &&
        !has_six_byte().ValueOr(false))
      return false;
    if (has_six_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_six_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_six_byte().ValueOr(false) &&
        has_six_byte().ValueOr(false) &&
        !six_byte().UncheckedEquals(emboss_reserved_local_other.six_byte()))
      return false;



    if (emboss_reserved_local_other.has_seven_byte().ValueOr(false) &&
        !has_seven_byte().ValueOr(false))
      return false;
    if (has_seven_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_seven_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_seven_byte().ValueOr(false) &&
        has_seven_byte().ValueOr(false) &&
        !seven_byte().UncheckedEquals(emboss_reserved_local_other.seven_byte()))
      return false;



    if (emboss_reserved_local_other.has_eight_byte().ValueOr(false) &&
        !has_eight_byte().ValueOr(false))
      return false;
    if (has_eight_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_eight_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_eight_byte().ValueOr(false) &&
        has_eight_byte().ValueOr(false) &&
        !eight_byte().UncheckedEquals(emboss_reserved_local_other.eight_byte()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  void UncheckedCopyFrom(
      GenericSizesView<OtherStorage> emboss_reserved_local_other) const {
    backing_.UncheckedCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().UncheckedRead());
  }

  template <typename OtherStorage>
  void CopyFrom(
      GenericSizesView<OtherStorage> emboss_reserved_local_other) const {
    backing_.CopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }
  template <typename OtherStorage>
  bool TryToCopyFrom(
      GenericSizesView<OtherStorage> emboss_reserved_local_other) const {
      return emboss_reserved_local_other.Ok() && backing_.TryToCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }

  template <class Stream>
  bool UpdateFromTextStream(Stream *emboss_reserved_local_stream) const {
    ::std::string emboss_reserved_local_brace;
    if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                      &emboss_reserved_local_brace))
      return false;
    if (emboss_reserved_local_brace != "{") return false;
    for (;;) {
      ::std::string emboss_reserved_local_name;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_name))
        return false;
      if (emboss_reserved_local_name == ",")
        if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                          &emboss_reserved_local_name))
          return false;
      if (emboss_reserved_local_name == "}") return true;
      ::std::string emboss_reserved_local_colon;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_colon))
        return false;
      if (emboss_reserved_local_colon != ":") return false;
      if (emboss_reserved_local_name == "one_byte") {
        if (!one_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "two_byte") {
        if (!two_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "three_byte") {
        if (!three_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "four_byte") {
        if (!four_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "five_byte") {
        if (!five_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "six_byte") {
        if (!six_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "seven_byte") {
        if (!seven_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "eight_byte") {
        if (!eight_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      return false;
    }
  }

  template <class Stream>
  void WriteToTextStream(
      Stream *emboss_reserved_local_stream,
      ::emboss::TextOutputOptions emboss_reserved_local_options) const {
    ::emboss::TextOutputOptions emboss_reserved_local_field_options =
        emboss_reserved_local_options.PlusOneIndent();
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write("{\n");
    } else {
      emboss_reserved_local_stream->Write("{");
    }
    bool emboss_reserved_local_wrote_field = false;
    if (has_one_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          one_byte().IsAggregate() || one_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("one_byte: ");
        one_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !one_byte().IsAggregate() && !one_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# one_byte: UNREADABLE\n");
      }
    }

    if (has_two_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          two_byte().IsAggregate() || two_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("two_byte: ");
        two_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !two_byte().IsAggregate() && !two_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# two_byte: UNREADABLE\n");
      }
    }

    if (has_three_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          three_byte().IsAggregate() || three_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("three_byte: ");
        three_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !three_byte().IsAggregate() && !three_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# three_byte: UNREADABLE\n");
      }
    }

    if (has_four_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          four_byte().IsAggregate() || four_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("four_byte: ");
        four_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !four_byte().IsAggregate() && !four_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# four_byte: UNREADABLE\n");
      }
    }

    if (has_five_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          five_byte().IsAggregate() || five_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("five_byte: ");
        five_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !five_byte().IsAggregate() && !five_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# five_byte: UNREADABLE\n");
      }
    }

    if (has_six_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          six_byte().IsAggregate() || six_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("six_byte: ");
        six_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !six_byte().IsAggregate() && !six_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# six_byte: UNREADABLE\n");
      }
    }

    if (has_seven_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          seven_byte().IsAggregate() || seven_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("seven_byte: ");
        seven_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !seven_byte().IsAggregate() && !seven_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# seven_byte: UNREADABLE\n");
      }
    }

    if (has_eight_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          eight_byte().IsAggregate() || eight_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("eight_byte: ");
        eight_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !eight_byte().IsAggregate() && !eight_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# eight_byte: UNREADABLE\n");
      }
    }

    (void)emboss_reserved_local_wrote_field;
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write(
          emboss_reserved_local_options.current_indent());
      emboss_reserved_local_stream->Write("}");
    } else {
      emboss_reserved_local_stream->Write(" }");
    }
  }



  static constexpr bool IsAggregate() { return true; }

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

 one_byte() const;
  ::emboss::support::Maybe<bool> has_one_byte() const;

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 1>>, 16>>

 two_byte() const;
  ::emboss::support::Maybe<bool> has_two_byte() const;

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<24, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 3>>, 24>>

 three_byte() const;
  ::emboss::support::Maybe<bool> has_three_byte() const;

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<32, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 32>>

 four_byte() const;
  ::emboss::support::Maybe<bool> has_four_byte() const;

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<40, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 10>>, 40>>

 five_byte() const;
  ::emboss::support::Maybe<bool> has_five_byte() const;

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<48, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 15>>, 48>>

 six_byte() const;
  ::emboss::support::Maybe<bool> has_six_byte() const;

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<56, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 56>>

 seven_byte() const;
  ::emboss::support::Maybe<bool> has_seven_byte() const;

 public:
  typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<64, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 28>>, 64>>

 eight_byte() const;
  ::emboss::support::Maybe<bool> has_eight_byte() const;

 public:
  class EmbossReservedDollarVirtualIntrinsicSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView() {}
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualIntrinsicSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView IntrinsicSizeInBytes() {
    return EmbossReservedDollarVirtualIntrinsicSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_IntrinsicSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMaxSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMaxSizeInBytesView() {}
    EmbossReservedDollarVirtualMaxSizeInBytesView(const EmbossReservedDollarVirtualMaxSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView(EmbossReservedDollarVirtualMaxSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(const EmbossReservedDollarVirtualMaxSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(EmbossReservedDollarVirtualMaxSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMaxSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMaxSizeInBytesView MaxSizeInBytes() {
    return EmbossReservedDollarVirtualMaxSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MaxSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMinSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMinSizeInBytesView() {}
    EmbossReservedDollarVirtualMinSizeInBytesView(const EmbossReservedDollarVirtualMinSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView(EmbossReservedDollarVirtualMinSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(const EmbossReservedDollarVirtualMinSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(EmbossReservedDollarVirtualMinSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMinSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMinSizeInBytesView MinSizeInBytes() {
    return EmbossReservedDollarVirtualMinSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MinSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }



 private:
  Storage backing_;
  
  

  template <class OtherStorage>
  friend class GenericSizesView;
};
using SizesView =
    GenericSizesView</**/ ::emboss::support::ReadOnlyContiguousBuffer>;
using SizesWriter =
    GenericSizesView</**/ ::emboss::support::ReadWriteContiguousBuffer>;

template <class View>
struct EmbossReservedInternalIsGenericSizesView {
  static constexpr const bool value = false;
};

template <class Storage>
struct EmbossReservedInternalIsGenericSizesView<
    GenericSizesView<Storage>> {
  static constexpr const bool value = true;
};

template <typename T>
inline GenericSizesView<
    /**/ ::emboss::support::ContiguousBuffer<
        typename ::std::remove_reference<
            decltype(*::std::declval<T>()->data())>::type,
        1, 0>>
MakeSizesView( T &&emboss_reserved_local_arg) {
  return GenericSizesView<
      /**/ ::emboss::support::ContiguousBuffer<
          typename ::std::remove_reference<decltype(
              *::std::declval<T>()->data())>::type,
          1, 0>>(
       ::std::forward<T>(emboss_reserved_local_arg));
}

template <typename T>
inline GenericSizesView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>
MakeSizesView( T *emboss_reserved_local_data,
                 ::std::size_t emboss_reserved_local_size) {
  return GenericSizesView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

template <typename T, ::std::size_t kAlignment>
inline GenericSizesView<
    /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>
MakeAlignedSizesView(
     T *emboss_reserved_local_data,
    ::std::size_t emboss_reserved_local_size) {
  return GenericSizesView<
      /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

namespace Sizes {

}  // namespace Sizes


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

 GenericSizesView<Storage>::one_byte()
    const {

  if ( has_one_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(0LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   0>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_one_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 1>>, 16>>

 GenericSizesView<Storage>::two_byte()
    const {

  if ( has_two_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 1>>, 16>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   1>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 1>>, 16>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_two_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<24, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 3>>, 24>>

 GenericSizesView<Storage>::three_byte()
    const {

  if ( has_three_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(3LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(3LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<24, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 3>>, 24>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   3>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<24, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 3>>, 24>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_three_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<32, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 32>>

 GenericSizesView<Storage>::four_byte()
    const {

  if ( has_four_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(4LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(6LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<32, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 32>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   6>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<32, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 32>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_four_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<40, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 10>>, 40>>

 GenericSizesView<Storage>::five_byte()
    const {

  if ( has_five_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(5LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(10LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<40, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 10>>, 40>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   10>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<40, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 10>>, 40>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_five_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<48, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 15>>, 48>>

 GenericSizesView<Storage>::six_byte()
    const {

  if ( has_six_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(6LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(15LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<48, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 15>>, 48>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   15>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<48, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 15>>, 48>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_six_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<56, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 56>>

 GenericSizesView<Storage>::seven_byte()
    const {

  if ( has_seven_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(7LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(21LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<56, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 56>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   21>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<56, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 56>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_seven_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<64, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 28>>, 64>>

 GenericSizesView<Storage>::eight_byte()
    const {

  if ( has_eight_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(8LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(28LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<64, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 28>>, 64>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   28>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::IntView<
    /**/ ::emboss::support::FixedSizeViewParameters<64, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 28>>, 64>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericSizesView<Storage>::has_eight_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


namespace Sizes {
inline constexpr ::std::int32_t IntrinsicSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(36LL)).ValueOrDefault();
}
}  // namespace Sizes

template <class Storage>
inline constexpr ::std::int32_t
GenericSizesView<Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::Read() {
  return Sizes::IntrinsicSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericSizesView<
    Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::UncheckedRead() {
  return Sizes::IntrinsicSizeInBytes();
}

namespace Sizes {
inline constexpr ::std::int32_t MaxSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(36LL)).ValueOrDefault();
}
}  // namespace Sizes

template <class Storage>
inline constexpr ::std::int32_t
GenericSizesView<Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::Read() {
  return Sizes::MaxSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericSizesView<
    Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::UncheckedRead() {
  return Sizes::MaxSizeInBytes();
}

namespace Sizes {
inline constexpr ::std::int32_t MinSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(36LL)).ValueOrDefault();
}
}  // namespace Sizes

template <class Storage>
inline constexpr ::std::int32_t
GenericSizesView<Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::Read() {
  return Sizes::MinSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericSizesView<
    Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::UncheckedRead() {
  return Sizes::MinSizeInBytes();
}



}  // namespace test



}  // namespace emboss



/* NOLINTEND */

#endif  // TESTDATA_INT_SIZES_EMB_H_

