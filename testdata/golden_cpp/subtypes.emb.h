/**
 * Generated by the Emboss compiler.  DO NOT EDIT!
 */
#ifndef TESTDATA_SUBTYPES_EMB_H_
#define TESTDATA_SUBTYPES_EMB_H_
#include <stdint.h>
#include <string.h>

#include <algorithm>
#include <type_traits>
#include <utility>

#include "runtime/cpp/emboss_cpp_util.h"

#include "runtime/cpp/emboss_prelude.h"

#include "runtime/cpp/emboss_enum_view.h"

#include "runtime/cpp/emboss_text_util.h"



/* NOLINTBEGIN */
namespace emboss {
namespace test {
namespace Out {
namespace In {
namespace InIn {
enum class InInIn : ::std::uint64_t;


}  // namespace InIn


template <class Storage>
class GenericInInView;


}  // namespace In


template <class Storage>
class GenericInView;


namespace In2 {

}  // namespace In2


template <class Storage>
class GenericIn2View;


}  // namespace Out


template <class Storage>
class GenericOutView;












namespace Out {








namespace In {





namespace InIn {
enum class InInIn : ::std::uint64_t {
  NO = static_cast</**/::std::int32_t>(0LL),
  YES = static_cast</**/::std::int32_t>(1LL),

};
template <class Enum>
class EnumTraits;

template <>
class EnumTraits<InInIn> final {
 public:
  static bool TryToGetEnumFromName(const char *emboss_reserved_local_name,
                                   InInIn *emboss_reserved_local_result) {
    if (emboss_reserved_local_name == nullptr) return false;
    if (!strcmp("NO", emboss_reserved_local_name)) {
      *emboss_reserved_local_result = InInIn::NO;
      return true;
    }

    if (!strcmp("YES", emboss_reserved_local_name)) {
      *emboss_reserved_local_result = InInIn::YES;
      return true;
    }

    return false;
  }

  static const char *TryToGetNameFromEnum(
      InInIn emboss_reserved_local_value) {
    switch (emboss_reserved_local_value) {
      case InInIn::NO: return "NO";

      case InInIn::YES: return "YES";

      default: return nullptr;
    }
  }

  static bool EnumIsKnown(InInIn emboss_reserved_local_value) {
    switch (emboss_reserved_local_value) {
      case InInIn::NO: return true;

      case InInIn::YES: return true;

      default:
        return false;
    }
  }

  static ::std::ostream &SendToOstream(::std::ostream &emboss_reserved_local_os,
                                       InInIn emboss_reserved_local_value) {
    const char *emboss_reserved_local_name =
        TryToGetNameFromEnum(emboss_reserved_local_value);
    if (emboss_reserved_local_name == nullptr) {
      emboss_reserved_local_os
          << static_cast</**/ ::std::underlying_type<InInIn>::type>(
                 emboss_reserved_local_value);
    } else {
      emboss_reserved_local_os << emboss_reserved_local_name;
    }
    return emboss_reserved_local_os;
  }
};

static inline bool TryToGetEnumFromName(
    const char *emboss_reserved_local_name,
    InInIn *emboss_reserved_local_result) {
  return EnumTraits<InInIn>::TryToGetEnumFromName(
      emboss_reserved_local_name, emboss_reserved_local_result);
}

static inline const char *TryToGetNameFromEnum(
    InInIn emboss_reserved_local_value) {
  return EnumTraits<InInIn>::TryToGetNameFromEnum(
      emboss_reserved_local_value);
}

static inline bool EnumIsKnown(InInIn emboss_reserved_local_value) {
  return EnumTraits<InInIn>::EnumIsKnown(emboss_reserved_local_value);
}

static inline ::std::ostream &operator<<(
    ::std::ostream &emboss_reserved_local_os,
    InInIn emboss_reserved_local_value) {
  return EnumTraits<InInIn>::SendToOstream(emboss_reserved_local_os,
                                             emboss_reserved_local_value);
}

}  // namespace InIn


template <class View>
struct EmbossReservedInternalIsGenericInInView;

template <class Storage>
class GenericInInView final {
 public:
  GenericInInView() : backing_() {}
  explicit GenericInInView(
       Storage emboss_reserved_local_bytes)
      : backing_(emboss_reserved_local_bytes) 
         {}

  template <typename OtherStorage>
  GenericInInView(
      const GenericInInView<OtherStorage> &emboss_reserved_local_other)
      : backing_{emboss_reserved_local_other.BackingStorage()}
         {}

  template <typename Arg,
            typename = typename ::std::enable_if<
                !EmbossReservedInternalIsGenericInInView<
                    typename ::std::remove_cv<typename ::std::remove_reference<
                        Arg>::type>::type>::value>::type>
  explicit GenericInInView(
       Arg &&emboss_reserved_local_arg)
      : backing_(::std::forward<Arg>(
            emboss_reserved_local_arg)) 
         {}
  template <typename Arg0, typename Arg1, typename... Args>
  explicit GenericInInView(
       Arg0 &&emboss_reserved_local_arg0,
      Arg1 &&emboss_reserved_local_arg1, Args &&... emboss_reserved_local_args)
      : backing_(::std::forward<Arg0>(emboss_reserved_local_arg0),
                 ::std::forward<Arg1>(emboss_reserved_local_arg1),
                 ::std::forward<Args>(
                     emboss_reserved_local_args)...) 
         {}

  template <typename OtherStorage>
  GenericInInView<Storage> &operator=(
      const GenericInInView<OtherStorage> &emboss_reserved_local_other) {
    backing_ = emboss_reserved_local_other.BackingStorage();
    return *this;
  }

    using InInIn = ::emboss::test::Out::In::InIn::InInIn;

  bool Ok() const {
    if (!IsComplete()) return false;

    if (!has_outer_offset().Known()) return false;
    if (has_outer_offset().ValueOrDefault() && !outer_offset().Ok()) return false;


    if (!has_field_enum().Known()) return false;
    if (has_field_enum().ValueOrDefault() && !field_enum().Ok()) return false;


    if (!has_in_2().Known()) return false;
    if (has_in_2().ValueOrDefault() && !in_2().Ok()) return false;


    if (!has_IntrinsicSizeInBytes().Known()) return false;
    if (has_IntrinsicSizeInBytes().ValueOrDefault() && !IntrinsicSizeInBytes().Ok()) return false;


    if (!has_MaxSizeInBytes().Known()) return false;
    if (has_MaxSizeInBytes().ValueOrDefault() && !MaxSizeInBytes().Ok()) return false;


    if (!has_MinSizeInBytes().Known()) return false;
    if (has_MinSizeInBytes().ValueOrDefault() && !MinSizeInBytes().Ok()) return false;



    return true;
  }
  Storage BackingStorage() const { return backing_; }
  bool IsComplete() const {
    return backing_.Ok() && IntrinsicSizeInBytes().Ok() &&
           backing_.SizeInBytes() >=
               static_cast</**/ ::std::size_t>(
                   IntrinsicSizeInBytes().UncheckedRead());
  }
  static constexpr ::std::size_t SizeInBytes() {
    return static_cast</**/ ::std::size_t>(IntrinsicSizeInBytes().Read());
  }
  static constexpr bool SizeIsKnown() {
    return IntrinsicSizeInBytes().Ok();
  }


  template <typename OtherStorage>
  bool Equals(
      GenericInInView<OtherStorage> emboss_reserved_local_other) const {
    
    if (!has_field_enum().Known()) return false;
    if (!emboss_reserved_local_other.has_field_enum().Known()) return false;

    if (emboss_reserved_local_other.has_field_enum().ValueOrDefault() &&
        !has_field_enum().ValueOrDefault())
      return false;
    if (has_field_enum().ValueOrDefault() &&
        !emboss_reserved_local_other.has_field_enum().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_field_enum().ValueOrDefault() &&
        has_field_enum().ValueOrDefault() &&
        !field_enum().Equals(emboss_reserved_local_other.field_enum()))
      return false;



    if (!has_in_2().Known()) return false;
    if (!emboss_reserved_local_other.has_in_2().Known()) return false;

    if (emboss_reserved_local_other.has_in_2().ValueOrDefault() &&
        !has_in_2().ValueOrDefault())
      return false;
    if (has_in_2().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_2().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_2().ValueOrDefault() &&
        has_in_2().ValueOrDefault() &&
        !in_2().Equals(emboss_reserved_local_other.in_2()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  bool UncheckedEquals(
      GenericInInView<OtherStorage> emboss_reserved_local_other) const {
    
    if (emboss_reserved_local_other.has_field_enum().ValueOr(false) &&
        !has_field_enum().ValueOr(false))
      return false;
    if (has_field_enum().ValueOr(false) &&
        !emboss_reserved_local_other.has_field_enum().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_field_enum().ValueOr(false) &&
        has_field_enum().ValueOr(false) &&
        !field_enum().UncheckedEquals(emboss_reserved_local_other.field_enum()))
      return false;



    if (emboss_reserved_local_other.has_in_2().ValueOr(false) &&
        !has_in_2().ValueOr(false))
      return false;
    if (has_in_2().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_2().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_2().ValueOr(false) &&
        has_in_2().ValueOr(false) &&
        !in_2().UncheckedEquals(emboss_reserved_local_other.in_2()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  void UncheckedCopyFrom(
      GenericInInView<OtherStorage> emboss_reserved_local_other) const {
    backing_.UncheckedCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().UncheckedRead());
  }

  template <typename OtherStorage>
  void CopyFrom(
      GenericInInView<OtherStorage> emboss_reserved_local_other) const {
    backing_.CopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }
  template <typename OtherStorage>
  bool TryToCopyFrom(
      GenericInInView<OtherStorage> emboss_reserved_local_other) const {
      return emboss_reserved_local_other.Ok() && backing_.TryToCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }

  template <class Stream>
  bool UpdateFromTextStream(Stream *emboss_reserved_local_stream) const {
    ::std::string emboss_reserved_local_brace;
    if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                      &emboss_reserved_local_brace))
      return false;
    if (emboss_reserved_local_brace != "{") return false;
    for (;;) {
      ::std::string emboss_reserved_local_name;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_name))
        return false;
      if (emboss_reserved_local_name == ",")
        if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                          &emboss_reserved_local_name))
          return false;
      if (emboss_reserved_local_name == "}") return true;
      ::std::string emboss_reserved_local_colon;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_colon))
        return false;
      if (emboss_reserved_local_colon != ":") return false;
      if (emboss_reserved_local_name == "field_enum") {
        if (!field_enum().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_2") {
        if (!in_2().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      return false;
    }
  }

  template <class Stream>
  void WriteToTextStream(
      Stream *emboss_reserved_local_stream,
      ::emboss::TextOutputOptions emboss_reserved_local_options) const {
    ::emboss::TextOutputOptions emboss_reserved_local_field_options =
        emboss_reserved_local_options.PlusOneIndent();
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write("{\n");
    } else {
      emboss_reserved_local_stream->Write("{");
    }
    bool emboss_reserved_local_wrote_field = false;
    if (has_outer_offset().ValueOr(false) &&
        emboss_reserved_local_field_options.comments()) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          outer_offset().IsAggregate() || outer_offset().Ok()) {
        emboss_reserved_local_stream->Write(
            emboss_reserved_local_field_options.current_indent());
        emboss_reserved_local_stream->Write("# outer_offset: ");
        outer_offset().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_stream->Write("\n");
      } else {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# outer_offset: UNREADABLE\n");
      }
    }

    if (has_field_enum().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          field_enum().IsAggregate() || field_enum().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("field_enum: ");
        field_enum().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !field_enum().IsAggregate() && !field_enum().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# field_enum: UNREADABLE\n");
      }
    }

    if (has_in_2().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_2().IsAggregate() || in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_2: ");
        in_2().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_2().IsAggregate() && !in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_2: UNREADABLE\n");
      }
    }

    (void)emboss_reserved_local_wrote_field;
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write(
          emboss_reserved_local_options.current_indent());
      emboss_reserved_local_stream->Write("}");
    } else {
      emboss_reserved_local_stream->Write(" }");
    }
  }



  static constexpr bool IsAggregate() { return true; }

 public:
  class EmbossReservedVirtualOuterOffsetView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedVirtualOuterOffsetView() {}
    EmbossReservedVirtualOuterOffsetView(const EmbossReservedVirtualOuterOffsetView &) = default;
    EmbossReservedVirtualOuterOffsetView(EmbossReservedVirtualOuterOffsetView &&) = default;
    EmbossReservedVirtualOuterOffsetView &operator=(const EmbossReservedVirtualOuterOffsetView &) =
        default;
    EmbossReservedVirtualOuterOffsetView &operator=(EmbossReservedVirtualOuterOffsetView &&) =
        default;
    ~EmbossReservedVirtualOuterOffsetView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedVirtualOuterOffsetView outer_offset() {
    return EmbossReservedVirtualOuterOffsetView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_outer_offset() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

 field_enum() const;
  ::emboss::support::Maybe<bool> has_field_enum() const;

 public:
  typename ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 1>>

 in_2() const;
  ::emboss::support::Maybe<bool> has_in_2() const;

 public:
  class EmbossReservedDollarVirtualIntrinsicSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView() {}
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualIntrinsicSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView IntrinsicSizeInBytes() {
    return EmbossReservedDollarVirtualIntrinsicSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_IntrinsicSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMaxSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMaxSizeInBytesView() {}
    EmbossReservedDollarVirtualMaxSizeInBytesView(const EmbossReservedDollarVirtualMaxSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView(EmbossReservedDollarVirtualMaxSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(const EmbossReservedDollarVirtualMaxSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(EmbossReservedDollarVirtualMaxSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMaxSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMaxSizeInBytesView MaxSizeInBytes() {
    return EmbossReservedDollarVirtualMaxSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MaxSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMinSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMinSizeInBytesView() {}
    EmbossReservedDollarVirtualMinSizeInBytesView(const EmbossReservedDollarVirtualMinSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView(EmbossReservedDollarVirtualMinSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(const EmbossReservedDollarVirtualMinSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(EmbossReservedDollarVirtualMinSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMinSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMinSizeInBytesView MinSizeInBytes() {
    return EmbossReservedDollarVirtualMinSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MinSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }



 private:
  Storage backing_;
  
  

  template <class OtherStorage>
  friend class GenericInInView;
};
using InInView =
    GenericInInView</**/ ::emboss::support::ReadOnlyContiguousBuffer>;
using InInWriter =
    GenericInInView</**/ ::emboss::support::ReadWriteContiguousBuffer>;

template <class View>
struct EmbossReservedInternalIsGenericInInView {
  static constexpr const bool value = false;
};

template <class Storage>
struct EmbossReservedInternalIsGenericInInView<
    GenericInInView<Storage>> {
  static constexpr const bool value = true;
};

template <typename T>
inline GenericInInView<
    /**/ ::emboss::support::ContiguousBuffer<
        typename ::std::remove_reference<
            decltype(*::std::declval<T>()->data())>::type,
        1, 0>>
MakeInInView( T &&emboss_reserved_local_arg) {
  return GenericInInView<
      /**/ ::emboss::support::ContiguousBuffer<
          typename ::std::remove_reference<decltype(
              *::std::declval<T>()->data())>::type,
          1, 0>>(
       ::std::forward<T>(emboss_reserved_local_arg));
}

template <typename T>
inline GenericInInView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>
MakeInInView( T *emboss_reserved_local_data,
                 ::std::size_t emboss_reserved_local_size) {
  return GenericInInView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

template <typename T, ::std::size_t kAlignment>
inline GenericInInView<
    /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>
MakeAlignedInInView(
     T *emboss_reserved_local_data,
    ::std::size_t emboss_reserved_local_size) {
  return GenericInInView<
      /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

}  // namespace In


template <class View>
struct EmbossReservedInternalIsGenericInView;

template <class Storage>
class GenericInView final {
 public:
  GenericInView() : backing_() {}
  explicit GenericInView(
       Storage emboss_reserved_local_bytes)
      : backing_(emboss_reserved_local_bytes) 
         {}

  template <typename OtherStorage>
  GenericInView(
      const GenericInView<OtherStorage> &emboss_reserved_local_other)
      : backing_{emboss_reserved_local_other.BackingStorage()}
         {}

  template <typename Arg,
            typename = typename ::std::enable_if<
                !EmbossReservedInternalIsGenericInView<
                    typename ::std::remove_cv<typename ::std::remove_reference<
                        Arg>::type>::type>::value>::type>
  explicit GenericInView(
       Arg &&emboss_reserved_local_arg)
      : backing_(::std::forward<Arg>(
            emboss_reserved_local_arg)) 
         {}
  template <typename Arg0, typename Arg1, typename... Args>
  explicit GenericInView(
       Arg0 &&emboss_reserved_local_arg0,
      Arg1 &&emboss_reserved_local_arg1, Args &&... emboss_reserved_local_args)
      : backing_(::std::forward<Arg0>(emboss_reserved_local_arg0),
                 ::std::forward<Arg1>(emboss_reserved_local_arg1),
                 ::std::forward<Args>(
                     emboss_reserved_local_args)...) 
         {}

  template <typename OtherStorage>
  GenericInView<Storage> &operator=(
      const GenericInView<OtherStorage> &emboss_reserved_local_other) {
    backing_ = emboss_reserved_local_other.BackingStorage();
    return *this;
  }

  

  bool Ok() const {
    if (!IsComplete()) return false;

    if (!has_in_in_1().Known()) return false;
    if (has_in_in_1().ValueOrDefault() && !in_in_1().Ok()) return false;


    if (!has_in_in_2().Known()) return false;
    if (has_in_in_2().ValueOrDefault() && !in_in_2().Ok()) return false;


    if (!has_in_in_in_1().Known()) return false;
    if (has_in_in_in_1().ValueOrDefault() && !in_in_in_1().Ok()) return false;


    if (!has_in_2().Known()) return false;
    if (has_in_2().ValueOrDefault() && !in_2().Ok()) return false;


    if (!has_name_collision().Known()) return false;
    if (has_name_collision().ValueOrDefault() && !name_collision().Ok()) return false;


    if (!has_name_collision_check().Known()) return false;
    if (has_name_collision_check().ValueOrDefault() && !name_collision_check().Ok()) return false;


    if (!has_IntrinsicSizeInBytes().Known()) return false;
    if (has_IntrinsicSizeInBytes().ValueOrDefault() && !IntrinsicSizeInBytes().Ok()) return false;


    if (!has_MaxSizeInBytes().Known()) return false;
    if (has_MaxSizeInBytes().ValueOrDefault() && !MaxSizeInBytes().Ok()) return false;


    if (!has_MinSizeInBytes().Known()) return false;
    if (has_MinSizeInBytes().ValueOrDefault() && !MinSizeInBytes().Ok()) return false;



    return true;
  }
  Storage BackingStorage() const { return backing_; }
  bool IsComplete() const {
    return backing_.Ok() && IntrinsicSizeInBytes().Ok() &&
           backing_.SizeInBytes() >=
               static_cast</**/ ::std::size_t>(
                   IntrinsicSizeInBytes().UncheckedRead());
  }
  ::std::size_t SizeInBytes() const {
    return static_cast</**/ ::std::size_t>(IntrinsicSizeInBytes().Read());
  }
  bool SizeIsKnown() const { return IntrinsicSizeInBytes().Ok(); }



  template <typename OtherStorage>
  bool Equals(
      GenericInView<OtherStorage> emboss_reserved_local_other) const {
    
    if (!has_in_in_1().Known()) return false;
    if (!emboss_reserved_local_other.has_in_in_1().Known()) return false;

    if (emboss_reserved_local_other.has_in_in_1().ValueOrDefault() &&
        !has_in_in_1().ValueOrDefault())
      return false;
    if (has_in_in_1().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_in_1().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_in_1().ValueOrDefault() &&
        has_in_in_1().ValueOrDefault() &&
        !in_in_1().Equals(emboss_reserved_local_other.in_in_1()))
      return false;



    if (!has_in_in_2().Known()) return false;
    if (!emboss_reserved_local_other.has_in_in_2().Known()) return false;

    if (emboss_reserved_local_other.has_in_in_2().ValueOrDefault() &&
        !has_in_in_2().ValueOrDefault())
      return false;
    if (has_in_in_2().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_in_2().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_in_2().ValueOrDefault() &&
        has_in_in_2().ValueOrDefault() &&
        !in_in_2().Equals(emboss_reserved_local_other.in_in_2()))
      return false;



    if (!has_in_in_in_1().Known()) return false;
    if (!emboss_reserved_local_other.has_in_in_in_1().Known()) return false;

    if (emboss_reserved_local_other.has_in_in_in_1().ValueOrDefault() &&
        !has_in_in_in_1().ValueOrDefault())
      return false;
    if (has_in_in_in_1().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_in_in_1().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_in_in_1().ValueOrDefault() &&
        has_in_in_in_1().ValueOrDefault() &&
        !in_in_in_1().Equals(emboss_reserved_local_other.in_in_in_1()))
      return false;



    if (!has_in_2().Known()) return false;
    if (!emboss_reserved_local_other.has_in_2().Known()) return false;

    if (emboss_reserved_local_other.has_in_2().ValueOrDefault() &&
        !has_in_2().ValueOrDefault())
      return false;
    if (has_in_2().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_2().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_2().ValueOrDefault() &&
        has_in_2().ValueOrDefault() &&
        !in_2().Equals(emboss_reserved_local_other.in_2()))
      return false;



    if (!has_name_collision().Known()) return false;
    if (!emboss_reserved_local_other.has_name_collision().Known()) return false;

    if (emboss_reserved_local_other.has_name_collision().ValueOrDefault() &&
        !has_name_collision().ValueOrDefault())
      return false;
    if (has_name_collision().ValueOrDefault() &&
        !emboss_reserved_local_other.has_name_collision().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_name_collision().ValueOrDefault() &&
        has_name_collision().ValueOrDefault() &&
        !name_collision().Equals(emboss_reserved_local_other.name_collision()))
      return false;



    if (!has_name_collision_check().Known()) return false;
    if (!emboss_reserved_local_other.has_name_collision_check().Known()) return false;

    if (emboss_reserved_local_other.has_name_collision_check().ValueOrDefault() &&
        !has_name_collision_check().ValueOrDefault())
      return false;
    if (has_name_collision_check().ValueOrDefault() &&
        !emboss_reserved_local_other.has_name_collision_check().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_name_collision_check().ValueOrDefault() &&
        has_name_collision_check().ValueOrDefault() &&
        !name_collision_check().Equals(emboss_reserved_local_other.name_collision_check()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  bool UncheckedEquals(
      GenericInView<OtherStorage> emboss_reserved_local_other) const {
    
    if (emboss_reserved_local_other.has_in_in_1().ValueOr(false) &&
        !has_in_in_1().ValueOr(false))
      return false;
    if (has_in_in_1().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_in_1().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_in_1().ValueOr(false) &&
        has_in_in_1().ValueOr(false) &&
        !in_in_1().UncheckedEquals(emboss_reserved_local_other.in_in_1()))
      return false;



    if (emboss_reserved_local_other.has_in_in_2().ValueOr(false) &&
        !has_in_in_2().ValueOr(false))
      return false;
    if (has_in_in_2().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_in_2().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_in_2().ValueOr(false) &&
        has_in_in_2().ValueOr(false) &&
        !in_in_2().UncheckedEquals(emboss_reserved_local_other.in_in_2()))
      return false;



    if (emboss_reserved_local_other.has_in_in_in_1().ValueOr(false) &&
        !has_in_in_in_1().ValueOr(false))
      return false;
    if (has_in_in_in_1().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_in_in_1().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_in_in_1().ValueOr(false) &&
        has_in_in_in_1().ValueOr(false) &&
        !in_in_in_1().UncheckedEquals(emboss_reserved_local_other.in_in_in_1()))
      return false;



    if (emboss_reserved_local_other.has_in_2().ValueOr(false) &&
        !has_in_2().ValueOr(false))
      return false;
    if (has_in_2().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_2().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_2().ValueOr(false) &&
        has_in_2().ValueOr(false) &&
        !in_2().UncheckedEquals(emboss_reserved_local_other.in_2()))
      return false;



    if (emboss_reserved_local_other.has_name_collision().ValueOr(false) &&
        !has_name_collision().ValueOr(false))
      return false;
    if (has_name_collision().ValueOr(false) &&
        !emboss_reserved_local_other.has_name_collision().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_name_collision().ValueOr(false) &&
        has_name_collision().ValueOr(false) &&
        !name_collision().UncheckedEquals(emboss_reserved_local_other.name_collision()))
      return false;



    if (emboss_reserved_local_other.has_name_collision_check().ValueOr(false) &&
        !has_name_collision_check().ValueOr(false))
      return false;
    if (has_name_collision_check().ValueOr(false) &&
        !emboss_reserved_local_other.has_name_collision_check().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_name_collision_check().ValueOr(false) &&
        has_name_collision_check().ValueOr(false) &&
        !name_collision_check().UncheckedEquals(emboss_reserved_local_other.name_collision_check()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  void UncheckedCopyFrom(
      GenericInView<OtherStorage> emboss_reserved_local_other) const {
    backing_.UncheckedCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().UncheckedRead());
  }

  template <typename OtherStorage>
  void CopyFrom(
      GenericInView<OtherStorage> emboss_reserved_local_other) const {
    backing_.CopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }
  template <typename OtherStorage>
  bool TryToCopyFrom(
      GenericInView<OtherStorage> emboss_reserved_local_other) const {
      return emboss_reserved_local_other.Ok() && backing_.TryToCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }

  template <class Stream>
  bool UpdateFromTextStream(Stream *emboss_reserved_local_stream) const {
    ::std::string emboss_reserved_local_brace;
    if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                      &emboss_reserved_local_brace))
      return false;
    if (emboss_reserved_local_brace != "{") return false;
    for (;;) {
      ::std::string emboss_reserved_local_name;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_name))
        return false;
      if (emboss_reserved_local_name == ",")
        if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                          &emboss_reserved_local_name))
          return false;
      if (emboss_reserved_local_name == "}") return true;
      ::std::string emboss_reserved_local_colon;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_colon))
        return false;
      if (emboss_reserved_local_colon != ":") return false;
      if (emboss_reserved_local_name == "in_in_1") {
        if (!in_in_1().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_in_2") {
        if (!in_in_2().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_in_in_1") {
        if (!in_in_in_1().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_2") {
        if (!in_2().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "name_collision") {
        if (!name_collision().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "name_collision_check") {
        if (!name_collision_check().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      return false;
    }
  }

  template <class Stream>
  void WriteToTextStream(
      Stream *emboss_reserved_local_stream,
      ::emboss::TextOutputOptions emboss_reserved_local_options) const {
    ::emboss::TextOutputOptions emboss_reserved_local_field_options =
        emboss_reserved_local_options.PlusOneIndent();
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write("{\n");
    } else {
      emboss_reserved_local_stream->Write("{");
    }
    bool emboss_reserved_local_wrote_field = false;
    if (has_in_in_1().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_in_1().IsAggregate() || in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_in_1: ");
        in_in_1().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_in_1().IsAggregate() && !in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_in_1: UNREADABLE\n");
      }
    }

    if (has_in_in_2().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_in_2().IsAggregate() || in_in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_in_2: ");
        in_in_2().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_in_2().IsAggregate() && !in_in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_in_2: UNREADABLE\n");
      }
    }

    if (has_in_in_in_1().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_in_in_1().IsAggregate() || in_in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_in_in_1: ");
        in_in_in_1().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_in_in_1().IsAggregate() && !in_in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_in_in_1: UNREADABLE\n");
      }
    }

    if (has_in_2().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_2().IsAggregate() || in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_2: ");
        in_2().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_2().IsAggregate() && !in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_2: UNREADABLE\n");
      }
    }

    if (has_name_collision().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          name_collision().IsAggregate() || name_collision().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("name_collision: ");
        name_collision().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !name_collision().IsAggregate() && !name_collision().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# name_collision: UNREADABLE\n");
      }
    }

    if (has_name_collision_check().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          name_collision_check().IsAggregate() || name_collision_check().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("name_collision_check: ");
        name_collision_check().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !name_collision_check().IsAggregate() && !name_collision_check().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# name_collision_check: UNREADABLE\n");
      }
    }

    (void)emboss_reserved_local_wrote_field;
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write(
          emboss_reserved_local_options.current_indent());
      emboss_reserved_local_stream->Write("}");
    } else {
      emboss_reserved_local_stream->Write(" }");
    }
  }



  static constexpr bool IsAggregate() { return true; }

 public:
  typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 0>>

 in_in_1() const;
  ::emboss::support::Maybe<bool> has_in_in_1() const;

 public:
  typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 2>>

 in_in_2() const;
  ::emboss::support::Maybe<bool> has_in_in_2() const;

 public:
  typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 4>>, 8>>

 in_in_in_1() const;
  ::emboss::support::Maybe<bool> has_in_in_in_1() const;

 public:
  typename ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 5>>

 in_2() const;
  ::emboss::support::Maybe<bool> has_in_2() const;

 public:
  typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 8>>

 name_collision() const;
  ::emboss::support::Maybe<bool> has_name_collision() const;

 public:
  typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/1, 0>>, 8>>

 name_collision_check() const;
  ::emboss::support::Maybe<bool> has_name_collision_check() const;

 public:
  class EmbossReservedDollarVirtualIntrinsicSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    explicit EmbossReservedDollarVirtualIntrinsicSizeInBytesView(
        const GenericInView &emboss_reserved_local_view)
        : view_(emboss_reserved_local_view) {}
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView() = delete;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualIntrinsicSizeInBytesView() = default;

    ::std::int32_t Read() const {
      EMBOSS_CHECK(view_.has_IntrinsicSizeInBytes().ValueOr(false));
      auto emboss_reserved_local_value = MaybeRead();
      EMBOSS_CHECK(emboss_reserved_local_value.Known());
      EMBOSS_CHECK(ValueIsOk(emboss_reserved_local_value.ValueOrDefault()));
      return emboss_reserved_local_value.ValueOrDefault();
    }
    ::std::int32_t UncheckedRead() const {
      return MaybeRead().ValueOrDefault();
    }
    bool Ok() const {
      auto emboss_reserved_local_value = MaybeRead();
      return emboss_reserved_local_value.Known() &&
             ValueIsOk(emboss_reserved_local_value.ValueOrDefault());
    }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }



   private:
    ::emboss::support::Maybe</**/ ::std::int32_t> MaybeRead() const {
      const auto emboss_reserved_local_subexpr_1 = view_.name_collision();
      const auto emboss_reserved_local_subexpr_2 = (emboss_reserved_local_subexpr_1.Ok()    ? ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(emboss_reserved_local_subexpr_1.UncheckedRead()))    : ::emboss::support::Maybe</**/::std::int32_t>());
      const auto emboss_reserved_local_subexpr_3 = ::emboss::support::Sum</**/::std::int32_t, ::std::int32_t, ::std::int32_t, ::std::int32_t>(emboss_reserved_local_subexpr_2, ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL)));
      const auto emboss_reserved_local_subexpr_4 = ::emboss::support::Choice</**/::std::int32_t, ::std::int32_t, bool, ::std::int32_t, ::std::int32_t>(::emboss::support::Maybe</**/bool>(true), emboss_reserved_local_subexpr_3, ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(0LL)));
      const auto emboss_reserved_local_subexpr_5 = ::emboss::support::Maximum</**/::std::int32_t, ::std::int32_t, ::std::int32_t, ::std::int32_t, ::std::int32_t, ::std::int32_t, ::std::int32_t, ::std::int32_t, ::std::int32_t>(::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(0LL)), ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL)), ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(4LL)), ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(5LL)), ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(6LL)), ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(7LL)), emboss_reserved_local_subexpr_4);

      return emboss_reserved_local_subexpr_5;
    }

    static constexpr bool ValueIsOk(
        ::std::int32_t emboss_reserved_local_value) {
      return (void)emboss_reserved_local_value,  // Silence -Wunused-parameter
             ::emboss::support::Maybe<bool>(true).ValueOr(false);
    }

    const GenericInView view_;
  };
  EmbossReservedDollarVirtualIntrinsicSizeInBytesView IntrinsicSizeInBytes() const;
  ::emboss::support::Maybe<bool> has_IntrinsicSizeInBytes() const;

 public:
  class EmbossReservedDollarVirtualMaxSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMaxSizeInBytesView() {}
    EmbossReservedDollarVirtualMaxSizeInBytesView(const EmbossReservedDollarVirtualMaxSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView(EmbossReservedDollarVirtualMaxSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(const EmbossReservedDollarVirtualMaxSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(EmbossReservedDollarVirtualMaxSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMaxSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMaxSizeInBytesView MaxSizeInBytes() {
    return EmbossReservedDollarVirtualMaxSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MaxSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMinSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMinSizeInBytesView() {}
    EmbossReservedDollarVirtualMinSizeInBytesView(const EmbossReservedDollarVirtualMinSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView(EmbossReservedDollarVirtualMinSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(const EmbossReservedDollarVirtualMinSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(EmbossReservedDollarVirtualMinSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMinSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMinSizeInBytesView MinSizeInBytes() {
    return EmbossReservedDollarVirtualMinSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MinSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }



 private:
  Storage backing_;
  
  

  template <class OtherStorage>
  friend class GenericInView;
};
using InView =
    GenericInView</**/ ::emboss::support::ReadOnlyContiguousBuffer>;
using InWriter =
    GenericInView</**/ ::emboss::support::ReadWriteContiguousBuffer>;

template <class View>
struct EmbossReservedInternalIsGenericInView {
  static constexpr const bool value = false;
};

template <class Storage>
struct EmbossReservedInternalIsGenericInView<
    GenericInView<Storage>> {
  static constexpr const bool value = true;
};

template <typename T>
inline GenericInView<
    /**/ ::emboss::support::ContiguousBuffer<
        typename ::std::remove_reference<
            decltype(*::std::declval<T>()->data())>::type,
        1, 0>>
MakeInView( T &&emboss_reserved_local_arg) {
  return GenericInView<
      /**/ ::emboss::support::ContiguousBuffer<
          typename ::std::remove_reference<decltype(
              *::std::declval<T>()->data())>::type,
          1, 0>>(
       ::std::forward<T>(emboss_reserved_local_arg));
}

template <typename T>
inline GenericInView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>
MakeInView( T *emboss_reserved_local_data,
                 ::std::size_t emboss_reserved_local_size) {
  return GenericInView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

template <typename T, ::std::size_t kAlignment>
inline GenericInView<
    /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>
MakeAlignedInView(
     T *emboss_reserved_local_data,
    ::std::size_t emboss_reserved_local_size) {
  return GenericInView<
      /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}




namespace In2 {

}  // namespace In2


template <class View>
struct EmbossReservedInternalIsGenericIn2View;

template <class Storage>
class GenericIn2View final {
 public:
  GenericIn2View() : backing_() {}
  explicit GenericIn2View(
       Storage emboss_reserved_local_bytes)
      : backing_(emboss_reserved_local_bytes) 
         {}

  template <typename OtherStorage>
  GenericIn2View(
      const GenericIn2View<OtherStorage> &emboss_reserved_local_other)
      : backing_{emboss_reserved_local_other.BackingStorage()}
         {}

  template <typename Arg,
            typename = typename ::std::enable_if<
                !EmbossReservedInternalIsGenericIn2View<
                    typename ::std::remove_cv<typename ::std::remove_reference<
                        Arg>::type>::type>::value>::type>
  explicit GenericIn2View(
       Arg &&emboss_reserved_local_arg)
      : backing_(::std::forward<Arg>(
            emboss_reserved_local_arg)) 
         {}
  template <typename Arg0, typename Arg1, typename... Args>
  explicit GenericIn2View(
       Arg0 &&emboss_reserved_local_arg0,
      Arg1 &&emboss_reserved_local_arg1, Args &&... emboss_reserved_local_args)
      : backing_(::std::forward<Arg0>(emboss_reserved_local_arg0),
                 ::std::forward<Arg1>(emboss_reserved_local_arg1),
                 ::std::forward<Args>(
                     emboss_reserved_local_args)...) 
         {}

  template <typename OtherStorage>
  GenericIn2View<Storage> &operator=(
      const GenericIn2View<OtherStorage> &emboss_reserved_local_other) {
    backing_ = emboss_reserved_local_other.BackingStorage();
    return *this;
  }

  

  bool Ok() const {
    if (!IsComplete()) return false;

    if (!has_field_byte().Known()) return false;
    if (has_field_byte().ValueOrDefault() && !field_byte().Ok()) return false;


    if (!has_IntrinsicSizeInBytes().Known()) return false;
    if (has_IntrinsicSizeInBytes().ValueOrDefault() && !IntrinsicSizeInBytes().Ok()) return false;


    if (!has_MaxSizeInBytes().Known()) return false;
    if (has_MaxSizeInBytes().ValueOrDefault() && !MaxSizeInBytes().Ok()) return false;


    if (!has_MinSizeInBytes().Known()) return false;
    if (has_MinSizeInBytes().ValueOrDefault() && !MinSizeInBytes().Ok()) return false;



    return true;
  }
  Storage BackingStorage() const { return backing_; }
  bool IsComplete() const {
    return backing_.Ok() && IntrinsicSizeInBytes().Ok() &&
           backing_.SizeInBytes() >=
               static_cast</**/ ::std::size_t>(
                   IntrinsicSizeInBytes().UncheckedRead());
  }
  static constexpr ::std::size_t SizeInBytes() {
    return static_cast</**/ ::std::size_t>(IntrinsicSizeInBytes().Read());
  }
  static constexpr bool SizeIsKnown() {
    return IntrinsicSizeInBytes().Ok();
  }


  template <typename OtherStorage>
  bool Equals(
      GenericIn2View<OtherStorage> emboss_reserved_local_other) const {
    
    if (!has_field_byte().Known()) return false;
    if (!emboss_reserved_local_other.has_field_byte().Known()) return false;

    if (emboss_reserved_local_other.has_field_byte().ValueOrDefault() &&
        !has_field_byte().ValueOrDefault())
      return false;
    if (has_field_byte().ValueOrDefault() &&
        !emboss_reserved_local_other.has_field_byte().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_field_byte().ValueOrDefault() &&
        has_field_byte().ValueOrDefault() &&
        !field_byte().Equals(emboss_reserved_local_other.field_byte()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  bool UncheckedEquals(
      GenericIn2View<OtherStorage> emboss_reserved_local_other) const {
    
    if (emboss_reserved_local_other.has_field_byte().ValueOr(false) &&
        !has_field_byte().ValueOr(false))
      return false;
    if (has_field_byte().ValueOr(false) &&
        !emboss_reserved_local_other.has_field_byte().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_field_byte().ValueOr(false) &&
        has_field_byte().ValueOr(false) &&
        !field_byte().UncheckedEquals(emboss_reserved_local_other.field_byte()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  void UncheckedCopyFrom(
      GenericIn2View<OtherStorage> emboss_reserved_local_other) const {
    backing_.UncheckedCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().UncheckedRead());
  }

  template <typename OtherStorage>
  void CopyFrom(
      GenericIn2View<OtherStorage> emboss_reserved_local_other) const {
    backing_.CopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }
  template <typename OtherStorage>
  bool TryToCopyFrom(
      GenericIn2View<OtherStorage> emboss_reserved_local_other) const {
      return emboss_reserved_local_other.Ok() && backing_.TryToCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }

  template <class Stream>
  bool UpdateFromTextStream(Stream *emboss_reserved_local_stream) const {
    ::std::string emboss_reserved_local_brace;
    if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                      &emboss_reserved_local_brace))
      return false;
    if (emboss_reserved_local_brace != "{") return false;
    for (;;) {
      ::std::string emboss_reserved_local_name;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_name))
        return false;
      if (emboss_reserved_local_name == ",")
        if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                          &emboss_reserved_local_name))
          return false;
      if (emboss_reserved_local_name == "}") return true;
      ::std::string emboss_reserved_local_colon;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_colon))
        return false;
      if (emboss_reserved_local_colon != ":") return false;
      if (emboss_reserved_local_name == "field_byte") {
        if (!field_byte().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      return false;
    }
  }

  template <class Stream>
  void WriteToTextStream(
      Stream *emboss_reserved_local_stream,
      ::emboss::TextOutputOptions emboss_reserved_local_options) const {
    ::emboss::TextOutputOptions emboss_reserved_local_field_options =
        emboss_reserved_local_options.PlusOneIndent();
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write("{\n");
    } else {
      emboss_reserved_local_stream->Write("{");
    }
    bool emboss_reserved_local_wrote_field = false;
    if (has_field_byte().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          field_byte().IsAggregate() || field_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("field_byte: ");
        field_byte().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !field_byte().IsAggregate() && !field_byte().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# field_byte: UNREADABLE\n");
      }
    }

    (void)emboss_reserved_local_wrote_field;
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write(
          emboss_reserved_local_options.current_indent());
      emboss_reserved_local_stream->Write("}");
    } else {
      emboss_reserved_local_stream->Write(" }");
    }
  }



  static constexpr bool IsAggregate() { return true; }

 public:
  typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

 field_byte() const;
  ::emboss::support::Maybe<bool> has_field_byte() const;

 public:
  class EmbossReservedDollarVirtualIntrinsicSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView() {}
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualIntrinsicSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView IntrinsicSizeInBytes() {
    return EmbossReservedDollarVirtualIntrinsicSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_IntrinsicSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMaxSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMaxSizeInBytesView() {}
    EmbossReservedDollarVirtualMaxSizeInBytesView(const EmbossReservedDollarVirtualMaxSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView(EmbossReservedDollarVirtualMaxSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(const EmbossReservedDollarVirtualMaxSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(EmbossReservedDollarVirtualMaxSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMaxSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMaxSizeInBytesView MaxSizeInBytes() {
    return EmbossReservedDollarVirtualMaxSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MaxSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMinSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMinSizeInBytesView() {}
    EmbossReservedDollarVirtualMinSizeInBytesView(const EmbossReservedDollarVirtualMinSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView(EmbossReservedDollarVirtualMinSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(const EmbossReservedDollarVirtualMinSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(EmbossReservedDollarVirtualMinSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMinSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMinSizeInBytesView MinSizeInBytes() {
    return EmbossReservedDollarVirtualMinSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MinSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }



 private:
  Storage backing_;
  
  

  template <class OtherStorage>
  friend class GenericIn2View;
};
using In2View =
    GenericIn2View</**/ ::emboss::support::ReadOnlyContiguousBuffer>;
using In2Writer =
    GenericIn2View</**/ ::emboss::support::ReadWriteContiguousBuffer>;

template <class View>
struct EmbossReservedInternalIsGenericIn2View {
  static constexpr const bool value = false;
};

template <class Storage>
struct EmbossReservedInternalIsGenericIn2View<
    GenericIn2View<Storage>> {
  static constexpr const bool value = true;
};

template <typename T>
inline GenericIn2View<
    /**/ ::emboss::support::ContiguousBuffer<
        typename ::std::remove_reference<
            decltype(*::std::declval<T>()->data())>::type,
        1, 0>>
MakeIn2View( T &&emboss_reserved_local_arg) {
  return GenericIn2View<
      /**/ ::emboss::support::ContiguousBuffer<
          typename ::std::remove_reference<decltype(
              *::std::declval<T>()->data())>::type,
          1, 0>>(
       ::std::forward<T>(emboss_reserved_local_arg));
}

template <typename T>
inline GenericIn2View</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>
MakeIn2View( T *emboss_reserved_local_data,
                 ::std::size_t emboss_reserved_local_size) {
  return GenericIn2View</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

template <typename T, ::std::size_t kAlignment>
inline GenericIn2View<
    /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>
MakeAlignedIn2View(
     T *emboss_reserved_local_data,
    ::std::size_t emboss_reserved_local_size) {
  return GenericIn2View<
      /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

}  // namespace Out


template <class View>
struct EmbossReservedInternalIsGenericOutView;

template <class Storage>
class GenericOutView final {
 public:
  GenericOutView() : backing_() {}
  explicit GenericOutView(
       Storage emboss_reserved_local_bytes)
      : backing_(emboss_reserved_local_bytes) 
         {}

  template <typename OtherStorage>
  GenericOutView(
      const GenericOutView<OtherStorage> &emboss_reserved_local_other)
      : backing_{emboss_reserved_local_other.BackingStorage()}
         {}

  template <typename Arg,
            typename = typename ::std::enable_if<
                !EmbossReservedInternalIsGenericOutView<
                    typename ::std::remove_cv<typename ::std::remove_reference<
                        Arg>::type>::type>::value>::type>
  explicit GenericOutView(
       Arg &&emboss_reserved_local_arg)
      : backing_(::std::forward<Arg>(
            emboss_reserved_local_arg)) 
         {}
  template <typename Arg0, typename Arg1, typename... Args>
  explicit GenericOutView(
       Arg0 &&emboss_reserved_local_arg0,
      Arg1 &&emboss_reserved_local_arg1, Args &&... emboss_reserved_local_args)
      : backing_(::std::forward<Arg0>(emboss_reserved_local_arg0),
                 ::std::forward<Arg1>(emboss_reserved_local_arg1),
                 ::std::forward<Args>(
                     emboss_reserved_local_args)...) 
         {}

  template <typename OtherStorage>
  GenericOutView<Storage> &operator=(
      const GenericOutView<OtherStorage> &emboss_reserved_local_other) {
    backing_ = emboss_reserved_local_other.BackingStorage();
    return *this;
  }

  

  bool Ok() const {
    if (!IsComplete()) return false;

    if (!has_in_1().Known()) return false;
    if (has_in_1().ValueOrDefault() && !in_1().Ok()) return false;


    if (!has_in_2().Known()) return false;
    if (has_in_2().ValueOrDefault() && !in_2().Ok()) return false;


    if (!has_in_in_1().Known()) return false;
    if (has_in_in_1().ValueOrDefault() && !in_in_1().Ok()) return false;


    if (!has_in_in_2().Known()) return false;
    if (has_in_in_2().ValueOrDefault() && !in_in_2().Ok()) return false;


    if (!has_in_in_in_1().Known()) return false;
    if (has_in_in_in_1().ValueOrDefault() && !in_in_in_1().Ok()) return false;


    if (!has_in_in_in_2().Known()) return false;
    if (has_in_in_in_2().ValueOrDefault() && !in_in_in_2().Ok()) return false;


    if (!has_name_collision().Known()) return false;
    if (has_name_collision().ValueOrDefault() && !name_collision().Ok()) return false;


    if (!has_nested_constant_check().Known()) return false;
    if (has_nested_constant_check().ValueOrDefault() && !nested_constant_check().Ok()) return false;


    if (!has_IntrinsicSizeInBytes().Known()) return false;
    if (has_IntrinsicSizeInBytes().ValueOrDefault() && !IntrinsicSizeInBytes().Ok()) return false;


    if (!has_MaxSizeInBytes().Known()) return false;
    if (has_MaxSizeInBytes().ValueOrDefault() && !MaxSizeInBytes().Ok()) return false;


    if (!has_MinSizeInBytes().Known()) return false;
    if (has_MinSizeInBytes().ValueOrDefault() && !MinSizeInBytes().Ok()) return false;



    return true;
  }
  Storage BackingStorage() const { return backing_; }
  bool IsComplete() const {
    return backing_.Ok() && IntrinsicSizeInBytes().Ok() &&
           backing_.SizeInBytes() >=
               static_cast</**/ ::std::size_t>(
                   IntrinsicSizeInBytes().UncheckedRead());
  }
  static constexpr ::std::size_t SizeInBytes() {
    return static_cast</**/ ::std::size_t>(IntrinsicSizeInBytes().Read());
  }
  static constexpr bool SizeIsKnown() {
    return IntrinsicSizeInBytes().Ok();
  }


  template <typename OtherStorage>
  bool Equals(
      GenericOutView<OtherStorage> emboss_reserved_local_other) const {
    
    if (!has_in_1().Known()) return false;
    if (!emboss_reserved_local_other.has_in_1().Known()) return false;

    if (emboss_reserved_local_other.has_in_1().ValueOrDefault() &&
        !has_in_1().ValueOrDefault())
      return false;
    if (has_in_1().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_1().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_1().ValueOrDefault() &&
        has_in_1().ValueOrDefault() &&
        !in_1().Equals(emboss_reserved_local_other.in_1()))
      return false;



    if (!has_in_2().Known()) return false;
    if (!emboss_reserved_local_other.has_in_2().Known()) return false;

    if (emboss_reserved_local_other.has_in_2().ValueOrDefault() &&
        !has_in_2().ValueOrDefault())
      return false;
    if (has_in_2().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_2().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_2().ValueOrDefault() &&
        has_in_2().ValueOrDefault() &&
        !in_2().Equals(emboss_reserved_local_other.in_2()))
      return false;



    if (!has_in_in_1().Known()) return false;
    if (!emboss_reserved_local_other.has_in_in_1().Known()) return false;

    if (emboss_reserved_local_other.has_in_in_1().ValueOrDefault() &&
        !has_in_in_1().ValueOrDefault())
      return false;
    if (has_in_in_1().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_in_1().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_in_1().ValueOrDefault() &&
        has_in_in_1().ValueOrDefault() &&
        !in_in_1().Equals(emboss_reserved_local_other.in_in_1()))
      return false;



    if (!has_in_in_2().Known()) return false;
    if (!emboss_reserved_local_other.has_in_in_2().Known()) return false;

    if (emboss_reserved_local_other.has_in_in_2().ValueOrDefault() &&
        !has_in_in_2().ValueOrDefault())
      return false;
    if (has_in_in_2().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_in_2().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_in_2().ValueOrDefault() &&
        has_in_in_2().ValueOrDefault() &&
        !in_in_2().Equals(emboss_reserved_local_other.in_in_2()))
      return false;



    if (!has_in_in_in_1().Known()) return false;
    if (!emboss_reserved_local_other.has_in_in_in_1().Known()) return false;

    if (emboss_reserved_local_other.has_in_in_in_1().ValueOrDefault() &&
        !has_in_in_in_1().ValueOrDefault())
      return false;
    if (has_in_in_in_1().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_in_in_1().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_in_in_1().ValueOrDefault() &&
        has_in_in_in_1().ValueOrDefault() &&
        !in_in_in_1().Equals(emboss_reserved_local_other.in_in_in_1()))
      return false;



    if (!has_in_in_in_2().Known()) return false;
    if (!emboss_reserved_local_other.has_in_in_in_2().Known()) return false;

    if (emboss_reserved_local_other.has_in_in_in_2().ValueOrDefault() &&
        !has_in_in_in_2().ValueOrDefault())
      return false;
    if (has_in_in_in_2().ValueOrDefault() &&
        !emboss_reserved_local_other.has_in_in_in_2().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_in_in_in_2().ValueOrDefault() &&
        has_in_in_in_2().ValueOrDefault() &&
        !in_in_in_2().Equals(emboss_reserved_local_other.in_in_in_2()))
      return false;



    if (!has_name_collision().Known()) return false;
    if (!emboss_reserved_local_other.has_name_collision().Known()) return false;

    if (emboss_reserved_local_other.has_name_collision().ValueOrDefault() &&
        !has_name_collision().ValueOrDefault())
      return false;
    if (has_name_collision().ValueOrDefault() &&
        !emboss_reserved_local_other.has_name_collision().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_name_collision().ValueOrDefault() &&
        has_name_collision().ValueOrDefault() &&
        !name_collision().Equals(emboss_reserved_local_other.name_collision()))
      return false;



    if (!has_nested_constant_check().Known()) return false;
    if (!emboss_reserved_local_other.has_nested_constant_check().Known()) return false;

    if (emboss_reserved_local_other.has_nested_constant_check().ValueOrDefault() &&
        !has_nested_constant_check().ValueOrDefault())
      return false;
    if (has_nested_constant_check().ValueOrDefault() &&
        !emboss_reserved_local_other.has_nested_constant_check().ValueOrDefault())
      return false;

    if (emboss_reserved_local_other.has_nested_constant_check().ValueOrDefault() &&
        has_nested_constant_check().ValueOrDefault() &&
        !nested_constant_check().Equals(emboss_reserved_local_other.nested_constant_check()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  bool UncheckedEquals(
      GenericOutView<OtherStorage> emboss_reserved_local_other) const {
    
    if (emboss_reserved_local_other.has_in_1().ValueOr(false) &&
        !has_in_1().ValueOr(false))
      return false;
    if (has_in_1().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_1().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_1().ValueOr(false) &&
        has_in_1().ValueOr(false) &&
        !in_1().UncheckedEquals(emboss_reserved_local_other.in_1()))
      return false;



    if (emboss_reserved_local_other.has_in_2().ValueOr(false) &&
        !has_in_2().ValueOr(false))
      return false;
    if (has_in_2().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_2().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_2().ValueOr(false) &&
        has_in_2().ValueOr(false) &&
        !in_2().UncheckedEquals(emboss_reserved_local_other.in_2()))
      return false;



    if (emboss_reserved_local_other.has_in_in_1().ValueOr(false) &&
        !has_in_in_1().ValueOr(false))
      return false;
    if (has_in_in_1().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_in_1().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_in_1().ValueOr(false) &&
        has_in_in_1().ValueOr(false) &&
        !in_in_1().UncheckedEquals(emboss_reserved_local_other.in_in_1()))
      return false;



    if (emboss_reserved_local_other.has_in_in_2().ValueOr(false) &&
        !has_in_in_2().ValueOr(false))
      return false;
    if (has_in_in_2().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_in_2().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_in_2().ValueOr(false) &&
        has_in_in_2().ValueOr(false) &&
        !in_in_2().UncheckedEquals(emboss_reserved_local_other.in_in_2()))
      return false;



    if (emboss_reserved_local_other.has_in_in_in_1().ValueOr(false) &&
        !has_in_in_in_1().ValueOr(false))
      return false;
    if (has_in_in_in_1().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_in_in_1().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_in_in_1().ValueOr(false) &&
        has_in_in_in_1().ValueOr(false) &&
        !in_in_in_1().UncheckedEquals(emboss_reserved_local_other.in_in_in_1()))
      return false;



    if (emboss_reserved_local_other.has_in_in_in_2().ValueOr(false) &&
        !has_in_in_in_2().ValueOr(false))
      return false;
    if (has_in_in_in_2().ValueOr(false) &&
        !emboss_reserved_local_other.has_in_in_in_2().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_in_in_in_2().ValueOr(false) &&
        has_in_in_in_2().ValueOr(false) &&
        !in_in_in_2().UncheckedEquals(emboss_reserved_local_other.in_in_in_2()))
      return false;



    if (emboss_reserved_local_other.has_name_collision().ValueOr(false) &&
        !has_name_collision().ValueOr(false))
      return false;
    if (has_name_collision().ValueOr(false) &&
        !emboss_reserved_local_other.has_name_collision().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_name_collision().ValueOr(false) &&
        has_name_collision().ValueOr(false) &&
        !name_collision().UncheckedEquals(emboss_reserved_local_other.name_collision()))
      return false;



    if (emboss_reserved_local_other.has_nested_constant_check().ValueOr(false) &&
        !has_nested_constant_check().ValueOr(false))
      return false;
    if (has_nested_constant_check().ValueOr(false) &&
        !emboss_reserved_local_other.has_nested_constant_check().ValueOr(false))
      return false;

    if (emboss_reserved_local_other.has_nested_constant_check().ValueOr(false) &&
        has_nested_constant_check().ValueOr(false) &&
        !nested_constant_check().UncheckedEquals(emboss_reserved_local_other.nested_constant_check()))
      return false;

 return true;
  }
  template <typename OtherStorage>
  void UncheckedCopyFrom(
      GenericOutView<OtherStorage> emboss_reserved_local_other) const {
    backing_.UncheckedCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().UncheckedRead());
  }

  template <typename OtherStorage>
  void CopyFrom(
      GenericOutView<OtherStorage> emboss_reserved_local_other) const {
    backing_.CopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }
  template <typename OtherStorage>
  bool TryToCopyFrom(
      GenericOutView<OtherStorage> emboss_reserved_local_other) const {
      return emboss_reserved_local_other.Ok() && backing_.TryToCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }

  template <class Stream>
  bool UpdateFromTextStream(Stream *emboss_reserved_local_stream) const {
    ::std::string emboss_reserved_local_brace;
    if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                      &emboss_reserved_local_brace))
      return false;
    if (emboss_reserved_local_brace != "{") return false;
    for (;;) {
      ::std::string emboss_reserved_local_name;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_name))
        return false;
      if (emboss_reserved_local_name == ",")
        if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                          &emboss_reserved_local_name))
          return false;
      if (emboss_reserved_local_name == "}") return true;
      ::std::string emboss_reserved_local_colon;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_colon))
        return false;
      if (emboss_reserved_local_colon != ":") return false;
      if (emboss_reserved_local_name == "in_1") {
        if (!in_1().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_2") {
        if (!in_2().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_in_1") {
        if (!in_in_1().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_in_2") {
        if (!in_in_2().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_in_in_1") {
        if (!in_in_in_1().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "in_in_in_2") {
        if (!in_in_in_2().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "name_collision") {
        if (!name_collision().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      if (emboss_reserved_local_name == "nested_constant_check") {
        if (!nested_constant_check().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }

      return false;
    }
  }

  template <class Stream>
  void WriteToTextStream(
      Stream *emboss_reserved_local_stream,
      ::emboss::TextOutputOptions emboss_reserved_local_options) const {
    ::emboss::TextOutputOptions emboss_reserved_local_field_options =
        emboss_reserved_local_options.PlusOneIndent();
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write("{\n");
    } else {
      emboss_reserved_local_stream->Write("{");
    }
    bool emboss_reserved_local_wrote_field = false;
    if (has_in_1().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_1().IsAggregate() || in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_1: ");
        in_1().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_1().IsAggregate() && !in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_1: UNREADABLE\n");
      }
    }

    if (has_in_2().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_2().IsAggregate() || in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_2: ");
        in_2().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_2().IsAggregate() && !in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_2: UNREADABLE\n");
      }
    }

    if (has_in_in_1().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_in_1().IsAggregate() || in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_in_1: ");
        in_in_1().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_in_1().IsAggregate() && !in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_in_1: UNREADABLE\n");
      }
    }

    if (has_in_in_2().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_in_2().IsAggregate() || in_in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_in_2: ");
        in_in_2().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_in_2().IsAggregate() && !in_in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_in_2: UNREADABLE\n");
      }
    }

    if (has_in_in_in_1().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_in_in_1().IsAggregate() || in_in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_in_in_1: ");
        in_in_in_1().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_in_in_1().IsAggregate() && !in_in_in_1().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_in_in_1: UNREADABLE\n");
      }
    }

    if (has_in_in_in_2().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          in_in_in_2().IsAggregate() || in_in_in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("in_in_in_2: ");
        in_in_in_2().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !in_in_in_2().IsAggregate() && !in_in_in_2().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# in_in_in_2: UNREADABLE\n");
      }
    }

    if (has_name_collision().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          name_collision().IsAggregate() || name_collision().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("name_collision: ");
        name_collision().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !name_collision().IsAggregate() && !name_collision().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# name_collision: UNREADABLE\n");
      }
    }

    if (has_nested_constant_check().ValueOr(false)) {
      if (!emboss_reserved_local_field_options.allow_partial_output() ||
          nested_constant_check().IsAggregate() || nested_constant_check().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        } else {
          if (emboss_reserved_local_wrote_field) {
            emboss_reserved_local_stream->Write(",");
          }
          emboss_reserved_local_stream->Write(" ");
        }
        emboss_reserved_local_stream->Write("nested_constant_check: ");
        nested_constant_check().WriteToTextStream(emboss_reserved_local_stream,
                                           emboss_reserved_local_field_options);
        emboss_reserved_local_wrote_field = true;
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write("\n");
        }
      } else if (emboss_reserved_local_field_options.allow_partial_output() &&
                 emboss_reserved_local_field_options.comments() &&
                 !nested_constant_check().IsAggregate() && !nested_constant_check().Ok()) {
        if (emboss_reserved_local_field_options.multiline()) {
          emboss_reserved_local_stream->Write(
              emboss_reserved_local_field_options.current_indent());
        }
        emboss_reserved_local_stream->Write("# nested_constant_check: UNREADABLE\n");
      }
    }

    (void)emboss_reserved_local_wrote_field;
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write(
          emboss_reserved_local_options.current_indent());
      emboss_reserved_local_stream->Write("}");
    } else {
      emboss_reserved_local_stream->Write(" }");
    }
  }



  static constexpr bool IsAggregate() { return true; }

 public:
  typename ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 0>>

 in_1() const;
  ::emboss::support::Maybe<bool> has_in_1() const;

 public:
  typename ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 8>>

 in_2() const;
  ::emboss::support::Maybe<bool> has_in_2() const;

 public:
  typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 16>>

 in_in_1() const;
  ::emboss::support::Maybe<bool> has_in_in_1() const;

 public:
  typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 18>>

 in_in_2() const;
  ::emboss::support::Maybe<bool> has_in_in_2() const;

 public:
  typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 20>>, 8>>

 in_in_in_1() const;
  ::emboss::support::Maybe<bool> has_in_in_in_1() const;

 public:
  typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 8>>

 in_in_in_2() const;
  ::emboss::support::Maybe<bool> has_in_in_in_2() const;

 public:
  typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 22>>, 16>>

 name_collision() const;
  ::emboss::support::Maybe<bool> has_name_collision() const;

 public:
  typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 24>>, 8>>

 nested_constant_check() const;
  ::emboss::support::Maybe<bool> has_nested_constant_check() const;

 public:
  class EmbossReservedDollarVirtualIntrinsicSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView() {}
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualIntrinsicSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView IntrinsicSizeInBytes() {
    return EmbossReservedDollarVirtualIntrinsicSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_IntrinsicSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMaxSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMaxSizeInBytesView() {}
    EmbossReservedDollarVirtualMaxSizeInBytesView(const EmbossReservedDollarVirtualMaxSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView(EmbossReservedDollarVirtualMaxSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(const EmbossReservedDollarVirtualMaxSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(EmbossReservedDollarVirtualMaxSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMaxSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMaxSizeInBytesView MaxSizeInBytes() {
    return EmbossReservedDollarVirtualMaxSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MaxSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMinSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMinSizeInBytesView() {}
    EmbossReservedDollarVirtualMinSizeInBytesView(const EmbossReservedDollarVirtualMinSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView(EmbossReservedDollarVirtualMinSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(const EmbossReservedDollarVirtualMinSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(EmbossReservedDollarVirtualMinSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMinSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }

    static constexpr bool IsAggregate() { return false; }
  };

  static constexpr EmbossReservedDollarVirtualMinSizeInBytesView MinSizeInBytes() {
    return EmbossReservedDollarVirtualMinSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MinSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }



 private:
  Storage backing_;
  
  

  template <class OtherStorage>
  friend class GenericOutView;
};
using OutView =
    GenericOutView</**/ ::emboss::support::ReadOnlyContiguousBuffer>;
using OutWriter =
    GenericOutView</**/ ::emboss::support::ReadWriteContiguousBuffer>;

template <class View>
struct EmbossReservedInternalIsGenericOutView {
  static constexpr const bool value = false;
};

template <class Storage>
struct EmbossReservedInternalIsGenericOutView<
    GenericOutView<Storage>> {
  static constexpr const bool value = true;
};

template <typename T>
inline GenericOutView<
    /**/ ::emboss::support::ContiguousBuffer<
        typename ::std::remove_reference<
            decltype(*::std::declval<T>()->data())>::type,
        1, 0>>
MakeOutView( T &&emboss_reserved_local_arg) {
  return GenericOutView<
      /**/ ::emboss::support::ContiguousBuffer<
          typename ::std::remove_reference<decltype(
              *::std::declval<T>()->data())>::type,
          1, 0>>(
       ::std::forward<T>(emboss_reserved_local_arg));
}

template <typename T>
inline GenericOutView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>
MakeOutView( T *emboss_reserved_local_data,
                 ::std::size_t emboss_reserved_local_size) {
  return GenericOutView</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

template <typename T, ::std::size_t kAlignment>
inline GenericOutView<
    /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>
MakeAlignedOutView(
     T *emboss_reserved_local_data,
    ::std::size_t emboss_reserved_local_size) {
  return GenericOutView<
      /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

namespace Out {
namespace In {
namespace InIn {

}  // namespace InIn


namespace InIn {
inline constexpr ::std::int32_t outer_offset() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(24LL)).ValueOrDefault();
}
}  // namespace InIn

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<Storage>::EmbossReservedVirtualOuterOffsetView::Read() {
  return InIn::outer_offset();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<
    Storage>::EmbossReservedVirtualOuterOffsetView::UncheckedRead() {
  return InIn::outer_offset();
}

template <class Storage>
inline typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

 GenericInInView<Storage>::field_enum()
    const {

  if ( has_field_enum().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(0LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   0>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInInView<Storage>::has_field_enum() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 1>>

 GenericInInView<Storage>::in_2()
    const {

  if ( has_in_2().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 1>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   1>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 1>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInInView<Storage>::has_in_2() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


namespace InIn {
inline constexpr ::std::int32_t IntrinsicSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL)).ValueOrDefault();
}
}  // namespace InIn

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::Read() {
  return InIn::IntrinsicSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<
    Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::UncheckedRead() {
  return InIn::IntrinsicSizeInBytes();
}

namespace InIn {
inline constexpr ::std::int32_t MaxSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL)).ValueOrDefault();
}
}  // namespace InIn

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::Read() {
  return InIn::MaxSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<
    Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::UncheckedRead() {
  return InIn::MaxSizeInBytes();
}

namespace InIn {
inline constexpr ::std::int32_t MinSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL)).ValueOrDefault();
}
}  // namespace InIn

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::Read() {
  return InIn::MinSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericInInView<
    Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::UncheckedRead() {
  return InIn::MinSizeInBytes();
}

}  // namespace In


template <class Storage>
inline typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 0>>

 GenericInView<Storage>::in_in_1()
    const {

  if ( has_in_in_1().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(0LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 0>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   0>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 0>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInView<Storage>::has_in_in_1() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 2>>

 GenericInView<Storage>::in_in_2()
    const {

  if ( has_in_in_2().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 2>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   2>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 2>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInView<Storage>::has_in_in_2() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 4>>, 8>>

 GenericInView<Storage>::in_in_in_1()
    const {

  if ( has_in_in_in_1().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(4LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 4>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   4>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 4>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInView<Storage>::has_in_in_in_1() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 5>>

 GenericInView<Storage>::in_2()
    const {

  if ( has_in_2().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(5LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 5>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   5>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::GenericIn2View<typename Storage::template OffsetStorageType</**/0, 5>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInView<Storage>::has_in_2() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 8>>

 GenericInView<Storage>::name_collision()
    const {

  if ( has_name_collision().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(6LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   6>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 6>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInView<Storage>::has_name_collision() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/1, 0>>, 8>>

 GenericInView<Storage>::name_collision_check()
    const {

  if ( has_name_collision_check().ValueOr(false)) {
    const auto emboss_reserved_local_subexpr_1 = name_collision();
    const auto emboss_reserved_local_subexpr_2 = (emboss_reserved_local_subexpr_1.Ok()    ? ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(emboss_reserved_local_subexpr_1.UncheckedRead()))    : ::emboss::support::Maybe</**/::std::int32_t>());

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = emboss_reserved_local_subexpr_2;
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/1, 0>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<1,
                                                   0>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/1, 0>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInView<Storage>::has_name_collision_check() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename GenericInView<Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView
GenericInView<Storage>::IntrinsicSizeInBytes() const {
  return
      typename GenericInView<Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView(
          *this);
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericInView<Storage>::has_IntrinsicSizeInBytes() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


namespace In {
inline constexpr ::std::int32_t MaxSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(256LL)).ValueOrDefault();
}
}  // namespace In

template <class Storage>
inline constexpr ::std::int32_t
GenericInView<Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::Read() {
  return In::MaxSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericInView<
    Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::UncheckedRead() {
  return In::MaxSizeInBytes();
}

namespace In {
inline constexpr ::std::int32_t MinSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(7LL)).ValueOrDefault();
}
}  // namespace In

template <class Storage>
inline constexpr ::std::int32_t
GenericInView<Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::Read() {
  return In::MinSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericInView<
    Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::UncheckedRead() {
  return In::MinSizeInBytes();
}

namespace In2 {

}  // namespace In2


template <class Storage>
inline typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

 GenericIn2View<Storage>::field_byte()
    const {

  if ( has_field_byte().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(0LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   0>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 0>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericIn2View<Storage>::has_field_byte() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


namespace In2 {
inline constexpr ::std::int32_t IntrinsicSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL)).ValueOrDefault();
}
}  // namespace In2

template <class Storage>
inline constexpr ::std::int32_t
GenericIn2View<Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::Read() {
  return In2::IntrinsicSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericIn2View<
    Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::UncheckedRead() {
  return In2::IntrinsicSizeInBytes();
}

namespace In2 {
inline constexpr ::std::int32_t MaxSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL)).ValueOrDefault();
}
}  // namespace In2

template <class Storage>
inline constexpr ::std::int32_t
GenericIn2View<Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::Read() {
  return In2::MaxSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericIn2View<
    Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::UncheckedRead() {
  return In2::MaxSizeInBytes();
}

namespace In2 {
inline constexpr ::std::int32_t MinSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL)).ValueOrDefault();
}
}  // namespace In2

template <class Storage>
inline constexpr ::std::int32_t
GenericIn2View<Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::Read() {
  return In2::MinSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericIn2View<
    Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::UncheckedRead() {
  return In2::MinSizeInBytes();
}

}  // namespace Out


template <class Storage>
inline typename ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 0>>

 GenericOutView<Storage>::in_1()
    const {

  if ( has_in_1().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(8LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(0LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 0>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   0>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 0>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_in_1() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 8>>

 GenericOutView<Storage>::in_2()
    const {

  if ( has_in_2().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(8LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(8LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   8>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::GenericInView<typename Storage::template OffsetStorageType</**/0, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_in_2() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 16>>

 GenericOutView<Storage>::in_in_1()
    const {

  if ( has_in_in_1().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(16LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 16>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   16>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 16>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_in_in_1() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 18>>

 GenericOutView<Storage>::in_in_2()
    const {

  if ( has_in_in_2().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(18LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 18>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   18>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::test::Out::In::GenericInInView<typename Storage::template OffsetStorageType</**/0, 18>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_in_in_2() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 20>>, 8>>

 GenericOutView<Storage>::in_in_in_1()
    const {

  if ( has_in_in_in_1().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(20LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 20>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   20>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 20>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_in_in_in_1() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 8>>

 GenericOutView<Storage>::in_in_in_2()
    const {

  if ( has_in_in_in_2().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(21LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   21>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::support::EnumView<
    /**/ ::emboss::test::Out::In::InIn::InInIn,
    ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 21>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_in_in_in_2() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 22>>, 16>>

 GenericOutView<Storage>::name_collision()
    const {

  if ( has_name_collision().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(2LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(22LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 22>>, 16>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   22>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<16, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 22>>, 16>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_name_collision() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


template <class Storage>
inline typename ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 24>>, 8>>

 GenericOutView<Storage>::nested_constant_check()
    const {

  if ( has_nested_constant_check().ValueOr(false)) {

    auto emboss_reserved_local_size = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(1LL));
    auto emboss_reserved_local_offset = ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(24LL));
    if (emboss_reserved_local_size.Known() &&
        emboss_reserved_local_size.ValueOr(0) >= 0 &&
        emboss_reserved_local_offset.Known() &&
        emboss_reserved_local_offset.ValueOr(0) >= 0) {
        return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 24>>, 8>>

(
                 backing_
                        .template GetOffsetStorage<0,
                                                   24>(
                                emboss_reserved_local_offset.ValueOrDefault(),
                                emboss_reserved_local_size.ValueOrDefault()));
    }
  }
  return ::emboss::prelude::UIntView<
    /**/ ::emboss::support::FixedSizeViewParameters<8, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::LittleEndianByteOrderer<typename Storage::template OffsetStorageType</**/0, 24>>, 8>>

();
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
GenericOutView<Storage>::has_nested_constant_check() const {
  return ::emboss::support::Maybe</**/bool>(true);
}


namespace Out {
inline constexpr ::std::int32_t IntrinsicSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(25LL)).ValueOrDefault();
}
}  // namespace Out

template <class Storage>
inline constexpr ::std::int32_t
GenericOutView<Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::Read() {
  return Out::IntrinsicSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericOutView<
    Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::UncheckedRead() {
  return Out::IntrinsicSizeInBytes();
}

namespace Out {
inline constexpr ::std::int32_t MaxSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(25LL)).ValueOrDefault();
}
}  // namespace Out

template <class Storage>
inline constexpr ::std::int32_t
GenericOutView<Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::Read() {
  return Out::MaxSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericOutView<
    Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::UncheckedRead() {
  return Out::MaxSizeInBytes();
}

namespace Out {
inline constexpr ::std::int32_t MinSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>(25LL)).ValueOrDefault();
}
}  // namespace Out

template <class Storage>
inline constexpr ::std::int32_t
GenericOutView<Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::Read() {
  return Out::MinSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t
GenericOutView<
    Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::UncheckedRead() {
  return Out::MinSizeInBytes();
}



}  // namespace test



}  // namespace emboss



/* NOLINTEND */

#endif  // TESTDATA_SUBTYPES_EMB_H_

